<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <!-- AUTOGENERATED FROM grammars/cython.syntax.yaml -->
  <dict>
    <key>name</key>
    <string>Cython</string>
    <key>scopeName</key>
    <string>source.cython</string>
    <key>fileTypes</key>
    <array>
      <string>pyx</string>
      <string>pxd</string>
      <string>pxi</string>
    </array>
    <key>firstLineMatch</key>
    <string>^#cython</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#statement</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#expression</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#import</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#statement-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#statement</string>
          </dict>
        </array>
      </dict>
      <key>expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#identifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-base</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#member-access</string>
          </dict>
        </array>
      </dict>
      <key>expression-bare</key>
      <dict>
        <key>comment</key>
        <string>valid Python expressions w/o comments and line continuation</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#typed-var-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#illegal-names</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#cast</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#c-types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage-modifiers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#expression-bare</string>
          </dict>
        </array>
      </dict>
      <key>expression-base</key>
      <dict>
        <key>comment</key>
        <string>valid Python expressions with comments and line continuation</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>source.python#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-bare</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#line-continuation</string>
          </dict>
        </array>
      </dict>
      <key>identifier</key>
      <dict>
        <key>comment</key>
        <string>Standard Identifier "myname0_name"</string>
        <key>patterns</key>
        <dict>
          <key>match</key>
          <string>(?x) \b &amp;?([[:alpha:]_]\w*) \b</string>
        </dict>
      </dict>
      <key>illegal-names</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>source.python#illegal-names</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
  \b(?:
    (
      nogil | gil | include | extern | extern from
    ) | (
      as | cimport
    ) | (
      cdef | cpdef | ctypedef | DEF
    ) | (
      const | unsigned | signed | new | readonly | inline | public
    )
  )\b
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.flow.cython</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.cython</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.declaration.cython</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.modifiers.cython</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>storage-modifiers</key>
      <array>
        <dict>
          <key>name</key>
          <string>storage.modifier.declaration.python</string>
          <key>match</key>
          <string>(?x)
  \b(?&lt;!\.)(
    const | unsigned | signed | new | readonly | inline | public
  )\b
</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>storage.type.modifiers.cython</string>
            </dict>
          </dict>
        </dict>
      </array>
      <key>c-types</key>
      <dict>
        <key>comment</key>
        <string>Built in C Types</string>
        <key>name</key>
        <string>support.type.cython</string>
        <key>match</key>
        <string>(?x)
  (?&lt;!\.)\b(
    char | short | complex | double | void | struct | enum | union | bint | size_t | ssize_t | NULL
  )\b
</string>
      </dict>
      <key>type-var-base</key>
      <dict>
        <key>comment</key>
        <string>A type. Can include members. "stdint.uint64_t"</string>
        <key>name</key>
        <string>support.type.cython</string>
        <key>match</key>
        <string>(?x)
  \b(([[:alpha:]_][\w\.]*))\b
</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#illegal-names</string>
          </dict>
        </array>
      </dict>
      <key>typed-var-declaration</key>
      <dict>
        <key>comment</key>
        <string>Typed var declaration. Does not include any modifiers or cdef. Examples:
  Normal: "double num"
  Pointer Pre and Post fix: "double *num" "double* num" "double **num"
  View: "double[::1] num" "double[:,:,:] num"
  Multiple: double num, num2, num3
  Do not match multiplication operator: "num * num2" "double *num = num2 * num3"

Steps:
  1. Ignore keywords / modifiers
  2. Match a type
  3. Allow optional view syntax
  4. Allow optional pre or postfix pointer
  5. Match variable name
  6. Match any additional variable names separated by ','
  7. Stop at end of line or assignment operator
</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#illegal-names</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
  (\b[[:alpha:]_][\w\.]*\b)
    (?:\[[:\d\,]*\])?
      (?:\*+\s|\s\*+|\s+)
        ([[:alpha:]_]\w*)
          (,\s*[[:alpha:]_]\w*)*
            (?:\s*=|\s*$)
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.type.cython</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.variable.name.cython</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.variable.name.cython</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>cast</key>
      <dict>
        <key>name</key>
        <string>support.type.cast.cython</string>
        <key>begin</key>
        <string>\&lt;(?=\s*[[:alpha:]_][\w\s\.\*]*\&gt;)</string>
        <key>end</key>
        <string>\&gt;</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.cast.begin.cython</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.cast.end.cython</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-var-base</string>
          </dict>
        </array>
      </dict>
      <key>statement-keyword</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>source.python#statement-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#storage-modifiers</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.type.declaration.cython</string>
            <key>match</key>
            <string>\b(def|cdef|cpdef)\b
  \s+(?!class)
    (?:\b[[:alpha:]_]\w*\s*\()
</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.cython</string>
            <key>match</key>
            <string>(?x)
  \b(?&lt;!\.)(nogil | gil | new | extern | include)\b
</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.type.declaration.cython</string>
            <key>match</key>
            <string>\b(DEF)\b\s+(?:\b[[:alpha:]_]\w*)
</string>
          </dict>
        </array>
      </dict>
      <key>import</key>
      <dict>
        <key>comment</key>
        <string>Import statements used to correctly mark `from`, `cimport`, and `as`
</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(?&lt;!\.)(from)\b(?=.+cimport)</string>
            <key>end</key>
            <string>$|(?=cimport)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.cython</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>punctuation.separator.period.cython</string>
                <key>match</key>
                <string>\.+</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\b(?&lt;!\.)(cimport)\b</string>
            <key>end</key>
            <string>$</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.cython</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>keyword.control.import.cython</string>
                <key>match</key>
                <string>\b(?&lt;!\.)as\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>class-declaration</key>
      <dict>
        <key>comment</key>
        <string>cdef class ClassName()</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.class.cython</string>
            <key>begin</key>
            <string>(?x)
  \s*(cdef\s+class)\s+
    (?=
      [[:alpha:]_]\w* \s* (:|\()?
    )
</string>
            <key>end</key>
            <string>(:|$)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.cython</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.class.begin.cython</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#class-name</string>
              </dict>
              <dict>
                <key>include</key>
                <string>source.python#class-inheritance</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>class-name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>source.python#illegal-object-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#builtin-possible-callables</string>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.class.cython</string>
            <key>match</key>
            <string>(?x)
  \b ([[:alpha:]_]\w*) \b
</string>
          </dict>
        </array>
      </dict>
      <key>function-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.function.cython</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#illegal-names</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)((?:\b[[:alpha:]_][\w\.]*\b)(?:\[[:\d\,]*\])?(?:\*+\s|\s\*+|\s))?([[:alpha:]_]\w*(\())
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.type.cython</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.cython</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.begin.cython</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>parameters</key>
      <dict>
        <key>name</key>
        <string>meta.function.parameters.cython</string>
        <key>begin</key>
        <string>(\()</string>
        <key>end</key>
        <string>(\))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.cython</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.cython</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.operator.unpacking.parameter.cython</string>
            <key>match</key>
            <string>(\*\*|\*)</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#typed-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#lambda-incomplete</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#illegal-names</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#illegal-object-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#parameter-special</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
  ([[:alpha:]_]\w*)
    \s* (?: (,) | (?=[)#\n=]))
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.language.cython</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.parameters.cython</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#loose-default</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.python#annotated-parameter</string>
          </dict>
        </array>
      </dict>
      <key>typed-parameter</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.python</string>
            <key>match</key>
            <string>=(?!=)</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
  (\b[[:alpha:]_][\w\.]*\b)
    (?:\[[:\d\,]*\])?
      (?:\*+\s|\s\*+|\s)
        ([[:alpha:]_]\w*)
          \s* (?: (,) | (?=[)#\n=]))
</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.type.parameter.function.language.cython</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.language.python</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>
